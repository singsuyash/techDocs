@{
    ViewBag.Title = "Moq";
}

<h2>Moq</h2>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Overview</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Introduction to the Moq framework</li>
            <li>Introduction to Mocking</li>
            <li>
                Hand Rolled Mocks
            </li>
            <li>Mocking with Moq</li>
            <li>Advanced Mocking with Moq</li>
        </ul>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Introduction to the Moq framework</div>
    </div>
    <div class="panel-body">
        <p>
            Supported Frameworks
            <ul>
                <li>.NET 3.5 and higher</li>
                <li>Silverlight</li>
                <li>Project containing tests can not be "Client Profile"</li>
            </ul>
        </p>
        <p>
            Installation: <code>install-package Moq</code>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Introduction to Mocking</div>
    </div>
    <div class="panel-body">
        <p>
            Overview
            <ul>
                <li>
                    Unit testing can be difficult
                    <ul>
                        <li>Complex Code</li>
                        <li>Code that is Coupled to other classes</li>
                        <li>Code that accesses external resources</li>
                    </ul>
                </li>
                <li>Good News... Test Doubles can help!</li>
                <li>
                    Test Doubles help you isolate the code you want to test
                </li>
                <li>Test doubles help support good coding principles</li>
            </ul>
        </p>
        <p>
            Properties of a good unit test
            <ul>
                <li>Atomic(one small piece of functionality)</li>
                <li>Deterministic(should always either pass or fail)</li>
                <li>Repeatable</li>
                <li>Order Independent and isolated(your test should not need to be run in any specific order to pass)</li>
                <li>Fast</li>
                <li>Easy to setup</li>
            </ul>
        </p>
        <p>
            A common problem with unit tests: A method under test can have instances of several other methods and objects. And those methods and objects can have several other methods and classes.
            <div>
                <img src="../../Content/Images/testing/moq/1.png" alt="" />
            </div>
            This can be avoided when all the dependencies of the method under test has fake dependencies. This is where test doubles come into play
            <div>
                <img src="../../Content/Images/testing/moq/2.png" alt="" />
            </div>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Hand Rolled Mock Objects</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>
                These are fake implementations of different abstraction that the method under test requires. For example: <code>CustomerService</code> class that implements the <code>ICustomerService</code> interface. To create a mock object you might create the <code>MockCustomerService</code> class dn implement <code>ICustomerService</code> interface.
            </li>
            <li>Once you've got the mock object created, you can now start to test that the code that needs to call that abstracted <code>ICustomerService</code> interface code is actually doing the calls. You can also work with it in different ways as far as providing back return values to control flow and exceptions so that you can test that exception handling is working correctly and things like that. To create those hand rolled mock objects you have to do all of the coding in hand. So you need to create the class by hand, you need to implement the interface that it needs by hand. And you need to implement the methods and properties  that are on that interface, so that theywill be able to work in your test in a way that you need them to</li>
        </ul>
        <p>
            Creating hand rolled mocks
            <ul>
                <li>Basic Class</li>
                <li>Implement the dependency interface</li>
                <li>
                    Flush out the dependency functionality needed, the methods and properties.
                    <ul>
                        <li>Return values</li>
                        <li>Exception throwing</li>
                        <li>"Was it called?"</li>
                        <li>"How many times was it called?"</li>
                    </ul>
                </li>
            </ul>
        </p>
        <p>
            Sample code
        </p>
        <p>
@Html.DisplayCode(@"

namespace Logger
{
    public interface IFooterLogger
    {
        string LogFoot();
    }
}


namespace Logger
{
    public interface IHeaderLogger
    {
        string LogHead();
    }
}

namespace Logger
{
    public interface ILogger
    {
        void Log();
    }
}

namespace Logger
{
    public interface IScrubbingLogger
    {
        void ScrubLog();
    }
}

namespace Logger
{
    public class Logger
    {

        private IHeaderLogger _headerLogger;
        private IFooterLogger _footerLogger;
        private IScrubbingLogger _scrubbingLogger;
        private ILogger _logger;

        public Logger(IHeaderLogger headerLogger, IFooterLogger footerLogger, IScrubbingLogger scrubbingLogger, ILogger logger)
        {
            _headerLogger = headerLogger;
            _footerLogger = footerLogger;
            _scrubbingLogger = scrubbingLogger;
            _logger = logger;
        }

        public void LogMessage(string message)
        {
            _headerLogger.LogHead();
            _scrubbingLogger.ScrubLog();
            _logger.Log();
            _footerLogger.LogFoot();
        }
        
    }
}

", "c#")
        </p>
        <p>
            Test
@Html.DisplayCode(@"
using Logger;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Diagnostics;

namespace LoggerTest
{

    public class MockScrubber : IScrubbingLogger
    {
        public void ScrubLog()
        {
            FromWasCalled = true;
        }

        public bool FromWasCalled { get; private set; }
    }

    public class MockHeaderLogger : IHeaderLogger
    {
        public string LogHead()
        {
            Debug.Print(""HeaderLogger"");
            return String.Empty;
        }
    }

    public class MockFooterLogger : IFooterLogger
    {

        public string LogFoot()
        {
            Debug.Print(""FooterLogger"");
            return String.Empty;
        }
    }

    public class MockLogger : ILogger
    {
        public void Log()
        {
            Debug.Print(""Logger"");
        }
    }



    [TestClass]
    public class LoggerClassTests
    {
        private MockScrubber _mockScrubber;
        private MockHeaderLogger _mockHeaderLogger;
        private MockFooterLogger _mockFooterLogger;
        private MockLogger _mockLogger;
        [TestInitialize]
        public void Setup()
        {
            _mockScrubber = new MockScrubber();
            _mockHeaderLogger = new MockHeaderLogger();
            _mockFooterLogger = new MockFooterLogger();
            _mockLogger = new MockLogger();
            var logger = new Logger.Logger(_mockHeaderLogger, _mockFooterLogger, _mockScrubber, _mockLogger);
            logger.LogMessage(""my message"");
        }

        [TestMethod]
        public void sensitivedatashouldbescrubbedfromthelogmessage()
        {
            Assert.IsTrue(_mockScrubber.FromWasCalled);
        }
    }
}

", "c#")
        </p>

        <p>
            The Good
            <ul>
                <li>Complete control over mock object functionality</li>
                <li>No need to learn frameworks</li>
                <li>As complexity grows, so do mock objects(can indicate that may be you have broken single responsibility principle for your code under test)</li>
            </ul>
        </p>
        <p>
            The Bad
            <ul>
                <li>Each mock object adds more code</li>
                <li>
                    As complexity grows, so do mock objects(sometimes complexity is required.)
                    <ul>
                        <li>More hand rolled mock objects</li>
                        <li>or More complex mock objects</li>
                    </ul>
                </li>
            </ul>
        </p>
        <p>
            The Ugly
            <ul>
                <li>
                    Brittleness when code under test changes
                    <ul>
                        <li>Interface changes</li>
                        <li>Interaction logic changes</li>
                    </ul>
                </li>
            </ul>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Mocking with Moq</div>
    </div>
    <div class="panel-body">
        <p>
            Outline
            <ul>
                <li>AAA</li>
                <li>Verification</li>
                <li>Return Values</li>
                <li>Parameters</li>
                <li>Exceptions</li>
                <li>Properties</li>
                <li>Stubbing</li>
                <li>Events</li>
            </ul>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">AAA</div>
    </div>
    <div class="panel-body">
        <p>
            Arrange, Act, Assert (see test/unittesting)
        </p>
        <p>
            <ul>
                <li>
                    Arrange
                    <ul>
                        <li>Creating a mock object</li>
                        <li>Pass the mock to the SUT(system under test) or CUT(code under test)</li>
                    </ul>
                </li>
                <li>
                    Act
                    <ul>
                        <li>Execute the SUT</li>
                    </ul>
                </li>
                <li>
                    Assert
                    <ul>
                        <li>Verify the SUT's interaction with the mock object</li>
                    </ul>
                </li>
            </ul>
        </p>

        <p>
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;

        public CustomerService(ICustomerRepository customerRepository)
        {
            _customerRepository = customerRepository;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var customer = BuildCustomerObjectFrom(customerToCreateDto);
            _customerRepository.Save(customer);
        }

        private Customer BuildCustomerObjectFrom(CustomerToCreateDto customerToCreateDto)
        {
            return new Customer(customerToCreateDto.Name, customerToCreateDto.City);
        }
    }

    public interface ICustomerRepository
    {
        void Save(Customer customer);
    }

    public class CustomerToCreateDto
    {
        public String Name { get; set; }
        public String City { get; set; }
    }

    public class Customer
    {
        public Customer(String name, String city)
        {
            Name = name;
            City = city;
        }

        public String Name { get; set; }
        public String City { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }
    }
}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace Customer.UnitTests
{
    [TestClass]
    public class CustomerTests
    {
        [TestMethod]
        public void the_repository_save_should_be_called()
        {
            //Arrange
            var mockRepository = new Mock<ICustomerRepository>();

            mockRepository.Setup(x => x.Save(It.IsAny<Customer>()));

            var customerService = new CustomerService(mockRepository.Object);


            //Act
            customerService.Create(new CustomerToCreateDto());

            //Assert
            mockRepository.VerifyAll();
        }
    }
}

", "c#")
        </p>
        <p>
            To verify the number of times <code>Save</code> is called.
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;

        public CustomerService(ICustomerRepository customerRepository)
        {
            _customerRepository = customerRepository;
        }

        public void Create(IEnumerable<CustomerToCreateDto> customersToCreate)
        {
            foreach (var customerToCreateDto in customersToCreate)
            {
                _customerRepository.Save(new Customer(customerToCreateDto.Name, customerToCreateDto.City));
            }
        }

        
    }

    public interface ICustomerRepository
    {
        void Save(Customer customer);
    }

    public class CustomerToCreateDto
    {   
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
    }

    public class Customer
    {
        public Customer(String name, String city)
        {
            Name = name;
            City = city;
        }

        public String Name { get; set; }
        public String City { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }
    }
}

", "c#")
        </p>
        <p>
            The test
@Html.DisplayCode(@"
 [TestMethod]
        public void the_customer_repository_should_be_called_once_per_customer()
        {
            //Arrange
            var listOfCutomerDtos = new List<CustomerToCreateDto>
            {
                new CustomerToCreateDto{FirstName=""Sam"", LastName=""Sampson""},
                new CustomerToCreateDto{FirstName=""Bob"", LastName=""Builder""},
                new CustomerToCreateDto{FirstName=""Doug"", LastName=""Digger""},
            };

            var mockCustomerRepository = new Mock<ICustomerRepository>();

            //This Setup only checks that the method Save is being called at least once.
            //mockCustomerRepository.Setup(x => x.Save(It.IsAny<Customer>()));
            
            var customerService = new CustomerService(mockCustomerRepository.Object);


            //Act
            customerService.Create(listOfCutomerDtos);

            //Assert
            //mockCustomerRepository.Verify();
            mockCustomerRepository.Verify(x => x.Save(It.IsAny<Customer>()), Times.Exactly(listOfCutomerDtos.Count));
        }
", "c#")
        </p>
        <p>
            This is to check for return values. In first method we specify that <code>null</code> will be returned and in the second method we specify that <code>string</code> will be returned. And based on these return types, check if a particular method is called or not.
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly ICustomerAddressBuilder _customerAddressBuilder;

        public CustomerService(ICustomerRepository customerRepository, ICustomerAddressBuilder customerAddressBuilder)
        {
            _customerRepository = customerRepository;
            _customerAddressBuilder = customerAddressBuilder;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var customer = new Customer(customerToCreateDto.FirstName, customerToCreateDto.LastName);

            customer.MailingAddress = _customerAddressBuilder.From(customerToCreateDto);

            if (customer.MailingAddress == null)
            {
                throw new InvalidCustomerMailingAddressException();
            }

            _customerRepository.Save(customer);
        }

        
    }

    public class InvalidCustomerMailingAddressException : Exception
    {
        public InvalidCustomerMailingAddressException() : base(""Invalid Address"")
        {
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
    }

    public interface ICustomerAddressBuilder
    {
        String From(CustomerToCreateDto customerToCreateDto);
    }


    public class CustomerToCreateDto
    {   
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
    }

    public class Customer
    {
        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }
    }

    public class CustomerAddressBuilder : ICustomerAddressBuilder
    {
        public string From(CustomerToCreateDto customerToCreateDto)
        {
            return ""Address is "" + customerToCreateDto.City;
        }
    }

}

", "c#")
        </p>
        <p>
            The test
@Html.DisplayCode(@"
[TestMethod]
        [ExpectedException(typeof(InvalidCustomerMailingAddressException))]
        public void an_exception_should_be_thrown_if_the_address_is_not_created()
        {
            //Arrange
            var customerToCreateDto = new CustomerToCreateDto { FirstName = ""Bob"", LastName = ""builder"" };

            var _mockCustomerRepository = new Mock<ICustomerRepository>();
            var _mockCustomerAddressBuilder = new Mock<ICustomerAddressBuilder>();

            _mockCustomerAddressBuilder.Setup(x => x.From(It.IsAny<CustomerToCreateDto>())).Returns(() => null);

            var customerService = new CustomerService(_mockCustomerRepository.Object, _mockCustomerAddressBuilder.Object);

            //Act
            customerService.Create(customerToCreateDto);
        }

        [TestMethod]
        public void the_customer_shouldbesavediftheaddress_was_created()
        {
            //Arrange
            var customerToCreateDto = new CustomerToCreateDto { FirstName = ""Ashok"", LastName = ""Samrat"", City = ""Magadh"" };
            var _mockCustomerRepository = new Mock<ICustomerRepository>();
            var _mockCustomerAddressBuilder = new Mock<ICustomerAddressBuilder>();

            _mockCustomerAddressBuilder.Setup(x => x.From(It.IsAny<CustomerToCreateDto>())).Returns(() => ""Address is Magadh"");

            var customerService = new CustomerService(_mockCustomerRepository.Object, _mockCustomerAddressBuilder.Object);

            //Act
            customerService.Create(customerToCreateDto);


            //Assert
            _mockCustomerRepository.Verify(y => y.Save(It.IsAny<Customer>()));
        }
", "c#")
        </p>
        <p>
            In case if the parameter is specified as <code>out</code>. just use out when you create a mock return.
        </p>
        <p>
            Multiple return values
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly IIdFactory _idFactory;

        public CustomerService(ICustomerRepository customerRepository, IIdFactory idFactory)
        {
            _customerRepository = customerRepository;
            _idFactory = idFactory;
        }

        public void Create(IEnumerable<CustomerToCreateDto> customersToCreateDto)
        {
            foreach (var customerToCreateDto in customersToCreateDto)
            {
                var customer = new Customer(customerToCreateDto.FirstName, customerToCreateDto.LastName);
                customer.Id = _idFactory.Create();

                _customerRepository.Save(customer);
            }
        }

        
    }

    public class InvalidCustomerMailingAddressException : Exception
    {
        public InvalidCustomerMailingAddressException() : base(""Invalid Address"")
        {
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
    }

    public interface IIdFactory
    {
        int Create();
    }


    public class CustomerToCreateDto
    {   
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
    }

    public class Customer
    {
        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }
    }

    public class IdFactory : IIdFactory
    {
        private int min=-1;
        private IdFactory()
        {
            min = 1;
        }
        public int Create()
        {
            min++;
            return min;
        }
    }
}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Collections.Generic;

namespace Customer.UnitTests
{
    [TestClass]
    public class CustomerTests
    {
        [TestMethod]
        public void each_customer_should_be_assigned_an_id()
        {
            //Arrange
            var listOfCustomersToCreate = new List<CustomerToCreateDto>
            {
                new CustomerToCreateDto(),
                new CustomerToCreateDto()
            };


            var _mockCustomerRepository = new Mock<ICustomerRepository>();
            var _mockIdFactory = new Mock<IIdFactory>();

            var i = 1;
            _mockIdFactory.Setup(x => x.Create()).Returns(() => i).Callback(() => i++);


            var customerService = new CustomerService(_mockCustomerRepository.Object, _mockIdFactory.Object);

            //Act
            customerService.Create(listOfCustomersToCreate); 

            //Assert
            _mockIdFactory.Verify(x => x.Create(), Times.Exactly(listOfCustomersToCreate.Count));
            Assert.IsTrue(i == listOfCustomersToCreate.Count + 2);
            
        }


    }


}

", "c#")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Arguments</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Verifying what value was passed</li>
            <li>Different behaviors for different method parameters</li>
            <li>Can be used to help control SUT execution flow</li>
        </ul>
        <p>
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly ICustomerFullNameBuilder _customerFullName;

        public CustomerService(ICustomerRepository customerRepository, ICustomerFullNameBuilder customerFullName)
        {
            _customerRepository = customerRepository;
            _customerFullName = customerFullName;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var fullName = _customerFullName.From(customerToCreateDto.FirstName, customerToCreateDto.LastName);

            var customer = new Customer(fullName);

            _customerRepository.Save(customer);
        }

        
    }

    public class InvalidCustomerMailingAddressException : Exception
    {
        public InvalidCustomerMailingAddressException() : base(""Invalid Address"")
        {
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
    }

    public interface ICustomerFullNameBuilder
    {
        String From(String firstName, String LastName);
    }


    public class CustomerToCreateDto
    {   
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
    }

    public class Customer
    {
        private string fullName;

        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public Customer(string fullName)
        {
            // TODO: Complete member initialization
            this.fullName = fullName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }
    }

    public class CustomerFullNameBuilder : ICustomerFullNameBuilder
    {
        public string From(string firstName, string LastName)
        {
            return firstName + "" "" + LastName;
        }
    }

}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Collections.Generic;

namespace Customer.UnitTests
{
    [TestClass]
    public class CustomerTests
    {
       [TestMethod]
        public void a_full_name_should_be_created_from_first_and_last_name()
        {
           //Arrange
           var customerToCreateDto = new CustomerToCreateDto{FirstName=""bob"", LastName=""builder""};
            var _mockRepository = new Mock<ICustomerRepository>();
            var _mockCustomerFullNameBuilder = new Mock<ICustomerFullNameBuilder>();

           _mockCustomerFullNameBuilder.Setup(x=>x.From(It.IsAny<string>(), It.IsAny<string>()));
            var customerService = new CustomerService(_mockRepository.Object, _mockCustomerFullNameBuilder.Object);

           //Act
           customerService.Create(customerToCreateDto);

           //Assert
           _mockCustomerFullNameBuilder.Verify(x=>x.From(
               It.Is<string>(
                fn=>fn.Equals(customerToCreateDto.FirstName,System.StringComparison.InvariantCultureIgnoreCase)
               ),
               It.Is<string>(fn=>fn.Equals(customerToCreateDto.LastName,System.StringComparison.InvariantCultureIgnoreCase)
               )
               ));
        }
    }
}

", "c#")
        </p>
        <p>
            Testing control flow
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly ICustomerStatusFactory _customerStatusFactory;

        public CustomerService(ICustomerRepository customerRepository, ICustomerStatusFactory customerStatusFactory)
        {
            _customerRepository = customerRepository;
            _customerStatusFactory = customerStatusFactory;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var customer = new Customer(customerToCreateDto.FirstName, customerToCreateDto.LastName);
            customer.StatusLevel = _customerStatusFactory.CreateFrom(customerToCreateDto);
            if (customer.StatusLevel == ""Platinum"")
            {
                _customerRepository.SaveSpecial(customer);
            }
            else
            {
                _customerRepository.Save(customer);
            }
        }

        
    }

    public class InvalidCustomerMailingAddressException : Exception
    {
        public InvalidCustomerMailingAddressException() : base(""Invalid Address"")
        {
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
        void SaveSpecial(Customer customer);
    }

    public interface ICustomerStatusFactory
    {
        String CreateFrom(CustomerToCreateDto customerToCreateDto);
    }


    public class CustomerToCreateDto
    {   
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
        public String StatusLevel { get; set; }
    }

    public class Customer
    {
        private string fullName;

        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public Customer(string fullName)
        {
            // TODO: Complete member initialization
            this.fullName = fullName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }

        public string StatusLevel { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }


        public void SaveSpecial(Customer customer)
        {
            customers.Add(customer);
        }
    }

    public class CustomerStatusFactory : ICustomerStatusFactory
    {
        public string CreateFrom(CustomerToCreateDto customerToCreateDto)
        {
            return customerToCreateDto.StatusLevel;
        }
    }


}

", "c#")
        </p>
        <p>
@Html.DisplayCode(@"
[TestMethod]
        public void argument_and_execution_flow()
        {
           //Arrange
            
           var customerToCreate = new CustomerToCreateDto
            {
                //StatusLevel = ""Platinum"",
                StatusLevel = ""Gold"",
                FirstName = ""Bob"",
                LastName = ""Builder""
            };
           var _mockCustomerRepository = new Mock<ICustomerRepository>();
            var _mockCustomerStatusFactory = new Mock<ICustomerStatusFactory>();

            _mockCustomerStatusFactory.Setup(x => x.CreateFrom(It.Is<CustomerToCreateDto>(y=>y.StatusLevel==""Platinum""))).Returns(""Platinum"");

            
            var customerService = new CustomerService(_mockCustomerRepository.Object, _mockCustomerStatusFactory.Object);

           //Act
            customerService.Create(customerToCreate);

           //Assert
            //_mockCustomerRepository.Verify(x => x.SaveSpecial(It.IsAny<Customer>()));
            _mockCustomerRepository.Verify(x => x.Save(It.IsAny<Customer>()));
        }
", "c#")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Exceptions</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Mock object throws when invoked</li>
            <li>Verifying SUT exception handling</li>
        </ul>
        <p>
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly ICustomerAddressFactory _customerAddressFactory;

        public CustomerService(ICustomerRepository customerRepository, ICustomerAddressFactory customerAddressFactory)
        {
            _customerRepository = customerRepository;
            _customerAddressFactory = customerAddressFactory;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            try
            {
                var customer = new Customer(customerToCreateDto.Name);
                customer.MailingAddress = _customerAddressFactory.From(customerToCreateDto);
                _customerRepository.Save(customer);
            }
            catch (InvalidCustomerAddressException e)
            {

                throw new CustomerCreationException(e);
            }
        }
    }

    public class InvalidCustomerAddressException : Exception
    {
        public InvalidCustomerAddressException()
            : base(""Invalid Address"")
        {
        }
    }

    public class CustomerCreationException : Exception
    {
        private InvalidCustomerAddressException e;

        public CustomerCreationException()
            : base(""Invalid Customer"")
        {

        }

        public CustomerCreationException(InvalidCustomerAddressException e)
        {
            // TODO: Complete member initialization
            this.e = e;
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
        void SaveSpecial(Customer customer);
    }

    public interface ICustomerAddressFactory
    {
        string From(CustomerToCreateDto customerToCreateDto);
    }


    public class CustomerToCreateDto
    {
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
        public String StatusLevel { get; set; }
    }

    public class Customer
    {
        private string fullName;

        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public Customer(string fullName)
        {
            // TODO: Complete member initialization
            this.fullName = fullName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }

        public string StatusLevel { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }


        public void SaveSpecial(Customer customer)
        {
            customers.Add(customer);
        }
    }
}

", "c#")
        </p>
        <p>
            The test
@Html.DisplayCode(@"
[TestMethod]
[ExpectedException(typeof(CustomerCreationException))]
public void when_creating_a_customer_which_has_an_invalid_address()
{
    //Arrange
    var _mockRepository = new Mock<ICustomerRepository>();
    var _mockCustomerAddressFactory = new Mock<ICustomerAddressFactory>();

    _mockCustomerAddressFactory
        .Setup(x => x.From(It.IsAny<CustomerToCreateDto>()))
        .Throws<InvalidCustomerAddressException>();


    var customerService = new CustomerService(_mockRepository.Object, _mockCustomerAddressFactory.Object);

    //Act
    customerService.Create(new CustomerToCreateDto());
           
    //Assert
}
", "c#")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Properties</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Verify "setter" calls</li>
            <li>Return values from "getter" calls</li>
            <li>Auto-mocking hierarchies(recursive mocks)</li>
        </ul>
        <p>
            Setter
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;

        public CustomerService(ICustomerRepository customerRepository)
        {
            _customerRepository = customerRepository;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var customer = new Customer(customerToCreateDto.FirstName, customerToCreateDto.LastName);

            _customerRepository.LocalTimeZone = TimeZone.CurrentTimeZone.StandardName;

            _customerRepository.Save(customer);
        }
    }

    public class InvalidCustomerAddressException : Exception
    {
        public InvalidCustomerAddressException()
            : base(""Invalid Address"")
        {
        }
    }

    public class CustomerCreationException : Exception
    {
        private InvalidCustomerAddressException e;

        public CustomerCreationException()
            : base(""Invalid Customer"")
        {

        }

        public CustomerCreationException(InvalidCustomerAddressException e)
        {
            // TODO: Complete member initialization
            this.e = e;
        }
    }


    public interface ICustomerRepository
    {
        void Save(Customer customer);
        void SaveSpecial(Customer customer);

        string LocalTimeZone { get; set; }
    }

    public interface ICustomerAddressFactory
    {
        string From(CustomerToCreateDto customerToCreateDto);
    }


    public class CustomerToCreateDto
    {
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
        public String StatusLevel { get; set; }
    }

    public class Customer
    {
        private string fullName;

        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public Customer(string fullName)
        {
            // TODO: Complete member initialization
            this.fullName = fullName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }

        public string StatusLevel { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }


        public void SaveSpecial(Customer customer)
        {
            customers.Add(customer);
        }


        public string LocalTimeZone
        {
            get;
            set;
        }
    }




}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
[TestMethod]
public void the_local_timezone_should_be_set()
{
    //Arrange
    var mockCustomerRepository = new Mock<ICustomerRepository>();

    var customerService = new CustomerService(mockCustomerRepository.Object);

    //Act
    customerService.Create(new CustomerToCreateDto());

    //Assert
    mockCustomerRepository.VerifySet(x => x.LocalTimeZone = It.IsAny<string>());
}
", "c#")
        </p>
        <p>
            Getter
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly IApplicationSettings _applicationSettings;

        public CustomerService(ICustomerRepository customerRepository, IApplicationSettings applicationSettings)
        {
            _customerRepository = customerRepository;
            _applicationSettings = applicationSettings;
        }

        public void Create(CustomerToCreateDto customerToCreateDto)
        {
            var customer = new Customer(customerToCreateDto.Name);
            var workstationId = _applicationSettings.WorkstationId;

            if (!workstationId.HasValue)
            {
                throw new InvalidWorkstationIdException();
            }

            customer.WorkStationCreatedOn = workstationId.Value;
            _customerRepository.Save(customer);
        }
    }

    public class InvalidWorkstationIdException : Exception
    {
        public InvalidWorkstationIdException():base(""Invalid workstationid"")
        {

        }
    }

    


    public interface ICustomerRepository
    {
        void Save(Customer customer);
        void SaveSpecial(Customer customer);

        string LocalTimeZone { get; set; }
    }

    public interface IApplicationSettings
    {
        int? WorkstationId { get; set; }
    }


    public class CustomerToCreateDto
    {
        public String City { get; set; }
        public String FirstName { get; set; }
        public String LastName { get; set; }
        public String Name { get { return FirstName + "" "" + LastName; } }
        public String StatusLevel { get; set; }
    }

    public class Customer
    {
        private string fullName;

        public Customer(String firstName, String lastName)
        {
            Name = firstName + "" "" + lastName;
        }

        public Customer(string fullName)
        {
            // TODO: Complete member initialization
            this.fullName = fullName;
        }

        public String Name { get; set; }
        public String City { get; set; }
        public String MailingAddress { get; set; }
        public int Id { get; set; }

        public string StatusLevel { get; set; }

        public int WorkStationCreatedOn { get; set; }
    }

    public class CustomerRepository : ICustomerRepository
    {
        List<Customer> customers;
        public CustomerRepository()
        {
            customers = new List<Customer>();
        }
        public void Save(Customer customer)
        {
            customers.Add(customer);
        }


        public void SaveSpecial(Customer customer)
        {
            customers.Add(customer);
        }


        public string LocalTimeZone
        {
            get;
            set;
        }
    }




}

", "c#")
        </p>
        <p>
            The test
@Html.DisplayCode(@"
[TestMethod]
        public void the_workstation_id_should_be_used()
        {
           //Arrange
            var mockCustomerRepository = new Mock<ICustomerRepository>();
            var mockApplicationSettings = new Mock<IApplicationSettings>();

            mockApplicationSettings
                .Setup(x => x.WorkstationId)
                .Returns(123);


            var customerService = new CustomerService(mockCustomerRepository.Object, mockApplicationSettings.Object);

           //Act
            customerService.Create(new CustomerToCreateDto());

           //Assert
            mockApplicationSettings.VerifyGet(x => x.WorkstationId);
        }
", "c#")
        </p>
        <p>
            Property Hierarchy
            <div>
<img src="../../Content/Images/testing/moq/3.png" alt="" />
            </div>
        </p>
        <p>
            Stubbing Properties
            <ul>
                <li>Pre-set values for properties on mock objects</li>
                <li>Changing those values</li>
                <li>SetupAllProperties</li>
            </ul>
            <div>
<img src="../../Content/Images/testing/moq/4.png" alt="" />
            </div>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Events</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Raise on the mock</li>
            <li>Raise further down the hierarchy</li>
            <li>Non-standard event signatures</li>
        </ul>
        <p>
            <div>
<img src="../../Content/Images/testing/moq/5.png" alt="" />
            </div>
            <div>
<img src="../../Content/Images/testing/moq/6.png" alt="" />
            </div>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Advanced Mocking</div>
    </div>
    <div class="panel-body">
        <p>
            Outline
            <ul>
                <li>Strict and Loose Mocking</li>
                <li>Base Class Implementations</li>
                <li>Recursive Mocking</li>
                <li>Centralized Mock Creation</li>
                <li>Protected Members</li>
            </ul>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Strict vs Loose Mocking</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>
                Strict
                <ul>
                    <li>raises exception for anything on a mock object that doesn't have an explicitly declared expectation</li>
                </ul>
            </li>
            <li>
                Loose
                <ul>
                    <li>no exception raised</li>
                    <li>returns default values when no expectation is explicitly declared</li>
                </ul>
            </li>
            <li>Loose is the Moq default behavior</li>
        </ul>
        <p>
            @Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        public CustomerService(ICustomerRepository customerRepository)
        {
            _customerRepository = customerRepository;
        }

        public void Create(CustomerToCreateDto customerToCreate)
        {
            var customer = new Customer(customerToCreate.Name);

            _customerRepository.Save(customer);
            _customerRepository.FetchAll();
        }
    }

    public interface ICustomerRepository
    {
        void FetchAll();

        void Save(Customer customer);
    }

    public class CustomerToCreateDto
    {
        public object Name { get; set; }
    }

    public class Customer
    {
        private object p;

        public Customer(object p)
        {
            // TODO: Complete member initialization
            this.p = p;
        }

    }
}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
[TestMethod]
public void the_customer_should_be_saved()
{
    //Arrange
    //Loose Mock
    //var mockCustomerRepository = 
        //new Mock<ICustomerRepository>();

    //Strict Mock
    var mockCustomerRepository = 
        new Mock<ICustomerRepository>(MockBehavior.Strict);

            
    mockCustomerRepository
        .Setup(x => x.Save(It.IsAny<Customer>()));

    var customerService = new CustomerService(mockCustomerRepository.Object);

    //Act
    customerService.Create(new CustomerToCreateDto());

    //Assert
    mockCustomerRepository.Verify();
            
}
", "c#")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Base Class Implementations</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>aka "Partial Mocks"</li>
            <li>Allows for invocation of base class implementation if no expectation has been set on the member</li>
            <li>Necessary for mocking Web/Html controls in System.Web</li>
        </ul>
        <p>
@Html.DisplayCode(@"
using System;

namespace Customer
{
    public class CustomerNameFormatter: BaseFormatter
    {
        public string From(Customer customer)
        {
            var firstName = ParseBadWordsFrom(customer.FirstName);
            var lastName = ParseBadWordsFrom(customer.LastName);

            return String.Format(""{0}, {1}"", lastName, firstName);
        }
    }

    public abstract class BaseFormatter
    {
        public virtual string ParseBadWordsFrom(string value)
        {
            return value.Replace(""SAP"", string.Empty);
        }
    }
}

", "c#")
        </p>
        <p>
            The Test
@Html.DisplayCode(@"
[TestMethod]
        public void bad_words_should_be_stripped_from_the_first_and_last_names()
        {
            //Arrange
            var mockNameFormatter = new Mock<CustomerNameFormatter>();

            //Act
            mockNameFormatter.Object.From(new Customer(""Bob"", ""SAPBuilder""));

            //Assert
            mockNameFormatter.Verify(
                x=>x.ParseBadWordsFrom(It.IsAny<string>()), Times.AtLeast(2)
                );
        }
", "c#")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Recursive Mocking</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>
                A mock object that returns a new mock object for every member
                <ul>
                    <li>If the member is mockable (i.e. not a value type)</li>
                    <li>If there is no expectation set on the member</li>
                </ul>
            </li>
            <li>
                The same mock object is returned on all calls
            </li>
        </ul>
        <p>
            <div>
<img src="../../Content/Images/testing/moq/7.png" alt="" />
            </div>
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Centralizing Mock Creation</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>MockRepository</li>
            <li>Configure all mock objects centrally</li>
            <li>Verify all mock objects in one call</li>
        </ul>
        <p>
@Html.DisplayCode(@"
using System;
using System.Collections.Generic;

namespace Customer
{
    public class CustomerService
    {
        private readonly ICustomerRepository _customerRepository;
        private readonly ICustomerAddressFormatter _customerAddressFormatter;
        public CustomerService(ICustomerRepository customerRepository, ICustomerAddressFormatter customerAddressFormatter)
        {
            _customerRepository = customerRepository;
            _customerAddressFormatter = customerAddressFormatter;
        }

        public void Create(CustomerToCreateDto customerToCreate)
        {
            var customer = new Customer(customerToCreate.Name);
            customer.Address = _customerAddressFormatter.For(customerToCreate);

            _customerRepository.FetchAll();
        }
    }

    public interface ICustomerRepository
    {
        void FetchAll();

        void Save(Customer customer);
    }

    public interface ICustomerAddressFormatter
    {
        string For(CustomerToCreateDto customerToCreate);
    }

    public class CustomerToCreateDto
    {
        public object Name { get; set; }
    }

    public class Customer
    {
        private object p;
        private string p1;
        private string p2;

        public Customer(object p)
        {
            // TODO: Complete member initialization
            this.p = p;
        }

        public Customer(string p1, string p2)
        {
            // TODO: Complete member initialization
            this.p1 = p1;
            this.p2 = p2;
        }


        public string FirstName { get; set; }

        public string LastName { get; set; }

        public string Address { get; set; }
    }
}

", "c#")
        </p>
        <p>
            The test
@Html.DisplayCode(@"
[TestMethod]
public void the_address_should_be_formatted()
{
//Arrange
var mockFactory = new MockRepository(MockBehavior.Loose) { DefaultValue = DefaultValue.Mock };

var mockCustomerRepository = mockFactory.Create<ICustomerRepository>();
var mockCustomerAddressFormatter = mockFactory.Create<ICustomerAddressFormatter>();

mockCustomerAddressFormatter
    .Setup(x => x.For(It.IsAny<CustomerToCreateDto>()))
    .Returns(""new address"");

var customerService = new CustomerService(
    mockCustomerRepository.Object, mockCustomerAddressFormatter.Object
    );

//Act
customerService.Create(new CustomerToCreateDto());

//Assert
mockFactory.Verify();
}
", "c#")
        </p>

    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Protected Members</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Mocking members that use the "protected" keyword</li>
            <li>No intellisense</li>
            <li>Must use "ItExpr" instead of "It"</li>
        </ul>
        <p>
<img src="../../Content/Images/testing/moq/8.png" alt="" />
        </p>
        <p>
<img src="../../Content/Images/testing/moq/9.png" alt="" />
        </p>
    </div>
</div>