@{
    ViewBag.Title = "GoodParts";
}

<h2>GoodParts</h2>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Objects</div>
    </div>
    <div class="panel-body">
        <p>
            Simple Types:
            <ul>
                <li><code>number</code></li>
                <li><code>string</code></li>
                <li><code>booleans(true and false)</code></li>
                <li><code>null</code></li>
                <li><code>undefined</code></li>
            </ul>
            All other values are <em><strong>objects</strong></em>
        </p>
        <p>
            <code>number</code>, <code>string</code> and <code>booleans</code> are object like in that they have methods, but they are immutable.
        </p>
        <p>
            <em><strong>object</strong></em>s are mutable Keyed Collections.
        </p>
        <p>
            Various <code>object</code> type
            <ul>
                <li>arrays</li>
                <li>functions</li>
                <li>regular expressions</li>
                <li>objects</li>
            </ul>
        </p>
        <p>
            Properties
            <ul>
                <li>An object is a container of properties</li>
                <li>Property has a name and value</li>
                <li>Property name can be any string, <em>including an empty string</em></li>
                <li>A property can be any javascript value except <code>undefined</code></li>
                <li>No constraint on the <em>name</em> of a property or on the values of properties</li>
                <li>A property name can be a keyword if it is in quotes</li>
            </ul>
        </p>
        <p>Javascript includes a <em><strong>prototype linkage</strong></em> feature that allows one object to inherit the properties of another. This reduces object initialization time and memory consumption.</p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Object Literals</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>
                @Html.DisplayCode(@"
var another_empty_object = new Object();
var empty_object = {};
", "js")
            </li>
            <li>
                @Html.DisplayCode(@"
var stooge = {
    ""first-name"": ""Jerome"",
    ""last-name"": ""Howard""
};
", "js")
            </li>
            <li>
                A propertie's value can be obtained from any expression, including another object literal. Objects can nest:
                @Html.DisplayCode(@"
var flight = {
    airline: ""Oceanic"",
    number: 815,
    departure: {
        IATA: ""SYD"",
        time: ""2004-09-22 14:55"",
        city: ""Sydney""
    },
    arrival: {
        IATA: ""LAX"",
        time: ""2004-09-23 10:42"",
        city: ""Los Angeles""
    }
};
", "language")
            </li>
        </ul>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Retrieval</div>
    </div>
    <div class="panel-body">
        <p>
            Values can be retrieved from an object by wrapping a string expression in a <code>[]</code> suffix if the the string expression is a constant. a <code>.</code> notation can be used if it is a legal JavaScript name and not a reserved word.
            @Html.DisplayCode(@"
stooge[""first-name""] // ""Joe""
flight.departure.IATA // ""SYD""
", "js")
        </p>
        <p>
            The <code>undefined</code> value is produced if an attempt is made to retrieve a non existent member:
            @Html.DisplayCode(@"
stooge[""middle-name""] // undefined
flight.status // undefined
stooge[""FIRST-NAME""] // undefined
", "js")
        </p>
        <p>
            <em><strong>Default</strong></em>
            @Html.DisplayCode(@"
var middle = stooge[""middle-name""] || ""(none)"";
var status = flight.status || ""unknown"";
", "js")
        </p>
        <p>
            <em><strong>Guard</strong></em>
            @Html.DisplayCode(@"
flight.equipment //undefined
flight.equipment.model //throw ""TypeError""
flight.equipment && flight.equipment.model //undefined
", "js")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Update</div>
    </div>
    <div class="panel-body">
        <p>
            If a property already exists, its updated
            @Html.DisplayCode(@"
    stooge['first-name'] = 'Jerome';
", "js")
        </p>
        <p>
            if the object does not already exists the object is <em><strong>augmented</strong></em>
            @Html.DisplayCode(@"
stooge['middle-name'] = 'Lester';
stooge.nickname = 'Curly';
flight.equipment = {
model: 'Boeing 777'
};
flight.status = 'overdue';
", "js")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Reference</div>
    </div>
    <div class="panel-body">
        <p>
            Objects are passed around <em><strong>reference</strong>. They are never copied.</em>
            @Html.DisplayCode(@"
var x = stooge;
x.nickname = 'Curly';
var nick = stooge.nickname;
// nick is 'Curly' because x and stooge
// are references to the same object
var a = {}, b = {}, c = {};
// a, b, and c each refer to a
// different empty object
a = b = c = {};
// a, b, and c all refer to
// the same empty object
", "js")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Prototype</div>
    </div>
    <div class="panel-body">
        <p>
            Javascript is a <em>prototypal</em> inheritance language. Generally in other languages with a type safe environment, a class can be derived by another class to get its data structure and behaviour. BUT there are no classes in javascript. JavaScript objects inherit data structure and behaviour from other objects. This is what we mean by a prototypal inheritance language and this is the difference between a classical and prototypal language.
        </p>
        <p>
            <code>Object</code> comes with javascript. Now, every other object is linked to a prototype object from which it can inherit properties. All objects created from object literals are linked to <code>Object.prototype</code>. This means if i add another property or method to <code>Object.prototype</code>, all objects created from object literal notation will have access to that property or method.
        </p>
        <p><img src="../../Content/Images/javascript/1.png" alt="" /></p>
        <p>
            Let's take an example to understand prototype. Take this piece of js code
            @Html.DisplayCode(@"
var Animal = function (legs, animalSound) {
    this.legs = legs;
    this.makeSound = function () {
        console.log(animalSound);
    };
};
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/2.png" alt="" /></p>
        <p><img src="../../Content/Images/javascript/3.png" alt="" /></p>
        <p>This shows that the prototype link has no effect on updating. When we make changes to an object, the object's prototype is not touched.</p>
        <p>
            The prototype link is used only in retrieval. If we try to retrieve a property value from an object, and if the object lacks the property name, then JavaScript attempts to retrieve the property value from the prototype object. And if that object is lacking the property, then it goes out to <em>its</em> prototype, ans so on until the process finally bottoms out with <code>Object.prototype</code>. If the desired property exists nowhere in the prototyep chain, then the result is the <code>undefined</code> value. This is called <em><strong>delegation</strong></em>
        </p>
        <p>
            The prototype relationship is a dynamic relationship. if we add a new property to a prototype, that property will immediately be visible in all of the objects that are based on that prototype.
        </p>
        <p><img src="../../Content/Images/javascript/4.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Reflection</div>
    </div>
    <div class="panel-body">
        <p>
            <img src="../../Content/Images/javascript/5.png" alt="" />
        </p>
        <p><img src="../../Content/Images/javascript/6.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Enumeration</div>
    </div>
    <div class="panel-body">
        <p>
            <code>for in</code> statement can loop over all of the property names in an object.
        </p>
        <p><img src="../../Content/Images/javascript/7.png" alt="" /></p>
        <p>Use filters like <code>typeof</code> or <code>hasOwnProperty</code> to see what you want.</p>
        <p>There is no guarantee in the order of the names. use <code>for</code> statement to have the same order as it was added. Also, it does not loop over prototype's properties.</p>
        <p></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Delete</div>
    </div>
    <div class="panel-body">
        <p>
            <img src="../../Content/Images/javascript/8.png" alt="" />
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Global Abatement</div>
    </div>
    <div class="panel-body">
        <p>
            Create a single global variable. Like <code>var MyAPP = {};</code>. This will make sure that the variables of you application do not conflict with variables of other widgets, plugins etc.
        </p>
        <p>Another way for Global availability is <em><strong>closure</strong></em></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Function Objects</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Functions in JavaScript are objects.</li>
            <li>Objects produced from object literals are linked to <code>Object.prototype</code>. But Function objects are linked to <code>Function.prototype</code> which happens to internally linked with <code>Object.prototype</code></li>
            <li>
                Every function is also created with 2 additional hidden properties
                <ul>
                    <li>The function's context</li>
                    <li>The code that implements the function's behavior</li>
                </ul>
            </li>
            <li>Every function object is also created with a <code>prototype</code> property. This is different from the hidden link to <code>Function.prototype</code>. It's value is an object with a <code>constructor</code> property</li>
            <li>
                Since functions are objects.
                <ul>
                    <li>They can be used like any other value</li>
                    <li>stored in variables, objects and arrays</li>
                    <li>can be passed as arguments to functions</li>
                    <li>can be returned from functions</li>
                    <li>can have methods</li>
                </ul>
            </li>
        </ul>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Function Literal</div>
    </div>
    <div class="panel-body">
        <p>
            @Html.DisplayCode(@"
var add = function(a,b){
    return a+b;
}
", "js")
        </p>
        <p>If the function is not given a name it is said to be <em>anonymous</em></p>
        <p>A function literal can appear anywhere that an expression can appear. Functions can be defined inside of other functions. An inner function has access to its parameters and variables along with the variables of the function it is nested within. The function object created by a function literal contains a link to that outer context. This is called <em><strong>closure</strong></em></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Invocation</div>
    </div>
    <div class="panel-body">
        <ul>
            <li>Invoking a function suspends the execution of the current function, passing control and parameters to the new function</li>
            <li>
                two additional parameters are available
                <ul>
                    <li><code>this</code></li>
                    <li><code>arguments</code></li>
                </ul>
            </li>
            <li>
                4 patterns of invocation
                <ul>
                    <li>Method invocation</li>
                    <li>Function invocation</li>
                    <li>Constructor invocation</li>
                    <li>Apply invocation</li>
                </ul>
            </li>
        </ul>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Method Invocation Pattern</div>
    </div>
    <div class="panel-body">
        When a function is stored as a property of an object, we call it a method. When a method is invoked <code>this</code> is bound to that object
        <p>
            @Html.DisplayCode(@"
// Create myObject. It has a value and an increment
// method. The increment method takes an optional
// parameter. If the argument is not a number, then 1
// is used as the default.
var myObject = {
    value: 0,
    increment: function (inc) {
        this.value += typeof inc === 'number' ? inc : 1;
    }
};
myObject.increment( );
document.writeln(myObject.value); // 1
myObject.increment(2);
document.writeln(myObject.value); // 3
", "js")
        </p>
        <p><code>this</code> is available to the method with its the then state at the time of invocation.</p>
        <p>Methods that get their object context from <code>this</code>are called <em>public methods</em></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">The Function Invocation Pattern</div>
    </div>
    <div class="panel-body">
        <p>When a function is not the property of an object, then it is invoked as a function</p>
        <p><code>this</code> inside the function becomes the global object, usually <code>Window</code> object</p>
        <p><img src="../../Content/Images/javascript/9.png" alt="" /></p>
        <p>Even in nested functions, the this does not becomes the actual object context.</p>
        <p>
            @Html.DisplayCode(@"
var myObject = {
    value: 0,
    increment: function (inc) {
        this.value += typeof inc === 'number' ? inc : 1;
    }
};

myObject.double = function () {
    //var that = this; // Workaround.
    var helper = function () {
        console.log(this);
        //that.value = add(this.value, this.value);
    };
    helper(); // Invoke helper as a function.
};
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/10.png" alt="" /></p>
        <p>But notice that <code>double</code> is a method because it is a property of <code>myObject</code>. And we remember in <em>method invocation</em> the <code>this</code> is the object context. So we can assign a variable specially to have an object that will hold the value of <code>this</code>. and pass that on to the inner function which is invoked as a function invocation</p>
        <p>
            @Html.DisplayCode(@"
myObject.double = function () {
    var that = this;
    var helper = function () {
        console.log(that);
    };
    helper(); // Invoke helper as a function.
};
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/11.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">The Constructor Invocation Pattern</div>
    </div>
    <div class="panel-body">
        <p>Functions that are intended to be used with the <code>new</code> prefix are called <em><strong>constructors</strong></em></p>
        <p>if a function is invoked with the <code>new</code> prefix, then a new object will be created with a hidden link to the value of the function's prototype member and <code>this</code> will be bound to that new object.</p>
        <p>
            @Html.DisplayCode(@"
// Create a constructor function called Quo.
// It makes an object with a status property.
var Quo = function (string) {
    this.status = string;
};
// Give all instances of Quo a public method
// called get_status.
Quo.prototype.get_status = function ( ) {
    return this.status;
};
// Make an instance of Quo.
var myQuo = new Quo(""confused"");
document.writeln(myQuo.get_status( )); // confused
", "js")
        </p>
        <p>Use of this style of constructor functions is not recommended. We will see better alternatives in the next chapter</p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">The Apply Incocation Pattern</div>
    </div>
    <div class="panel-body">
        <p>Recall the method invocation pattern</p>
        <p>This is similar to method invocation pattern, but that we can change the <code>this</code> object that will be used inside the method.</p>
        <p>
            @Html.DisplayCode(@"
// Make an array of 2 numbers and add them.
var array = [3, 4];
var sum = add.apply(null, array); // sum is 7
// Make an object with a status member.
var statusObject = {
    status: 'A-OK'
};
// statusObject does not inherit from Quo.prototype,
// but we can invoke the get_status method on
// statusObject even though statusObject does not have
// a get_status method.
var status = Quo.prototype.get_status.apply(statusObject);
// status is 'A-OK'
", "js")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Arguments</div>
    </div>
    <div class="panel-body">
        A bonus parameter that is available to functions when they are invoked. It gives the function access to all of the arguments that were supplied with the invocation, including excess argumetns that were not assigned to parameters.
        <p>
            @Html.DisplayCode(@"
// Make a function that adds a lot of stuff.
// Note that defining the variable sum inside of
// the function does not interfere with the sum
// defined outside of the function. The function
// only sees the inner one.
var sum = function ( ) {
var i, sum = 0;
for (i = 0; i < arguments.length; i += 1) {
    sum += arguments[i];
}
return sum;
};
document.writeln(sum(4, 8, 15, 16, 23, 42)); // 108
", "js")
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Return</div>
    </div>
    <div class="panel-body">
        <p>A function always returns a value. if the return value is nto specified, then <code>undefined</code> is returned.</p>
        <p>If the function was invoked with the <code>new</code> prefix and the <code>return</code> value is not an object, then <code>this</code>(the new object) is returned instead.</p>
        <p>
            @Html.DisplayCode(@"
var Customer = function (name) {
    this.name = name;
    this.getname = function () {
        return this.name;
    }
    return name;
};
", "js")
        </p>
        <p>
            <img src="../../Content/Images/javascript/12.png" alt="" />
        </p>
        <p>
            @Html.DisplayCode(@"
var Customer = function (name) {
    this.name = name;
    this.getname = function () {
        return this.name;
    }
    return {""name"": this.name};
};
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/13.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Exceptions</div>
    </div>
    <div class="panel-body">
        <p><code>try</code>, <code>catch</code> and <code>throw</code> is available</p>
        <p>
            @Html.DisplayCode(@"
var add = function (a, b) {
    if (typeof a !== 'number' || typeof b !== 'number') {
        throw {
            name: 'TypeError',
            message: 'add needs numbers'
        };
    }
    return a + b;
}

// Make a try_it function that calls the new add
// function incorrectly.
var try_it = function ( ) {
    try {
        add(""seven"");
    } catch (e) {
        document.writeln(e.name + ': ' + e.message);
    }
}
try_it( );
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/14.png" alt="" /></p>
        <p>Please note that "name" and "message" should not necessarily be "name" and "message". The name could have been "name2", "message2"</p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Augmenting Types</div>
    </div>
    <div class="panel-body">
        Any base function can add something to its prototype and it will be available to all who are <code>new</code> of this base function.
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Recursion</div>
    </div>
    <div class="panel-body">
        TODO
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Scope</div>
    </div>
    <div class="panel-body">
        <p>
            @Html.DisplayCode(@"
var foo = function ( ) {
    var a = 3, b = 5;
    var bar = function ( ) {
        var b = 7, c = 11;
        // At this point, a is 3, b is 7, and c is 11
        a += b + c;
        // At this point, a is 21, b is 7, and c is 11
    };
    // At this point, a is 3, b is 5, and c is not defined
    bar( );
    // At this point, a is 21, b is 5
};
", "js")
        </p>
        <p>JavaScript has "functional scoping"</p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Closure</div>
    </div>
    <div class="panel-body">
        <p>Inner functions get access to the parameters and variables of the functions they are defined within(with the exception of <code>this</code> and <code>arguments</code>)</p>
        <p>
            Consider the case: a function returning a function.
            @Html.DisplayCode(@"
var myObject = function () {
    var value = 0;
    return {
        increment: function (inc) {
            value += typeof inc === 'number' ? inc : 1;
        },
        getValue: function () {
            return value;
        }
    };
}();
", "js")
        </p>
        <p>
            This is a self calling anonymous function. It ran when the script loaded. <code>myObject</code> has 2 function properties <code>increment</code> and <code>getValue</code>
        </p>
        <p><img src="../../Content/Images/javascript/15.png" alt="" /></p>
        <p>If you look at the definition of <code>increment</code> and <code>getValue</code> it uses <code>value</code> variable that was not actually defined within <code>increment</code> and <code>getValue</code></p>
        <p>We said JavaScript has functional scoping. So once the anonymous function ran and finished executing the <code>value</code> variable should not exist.</p>
        <p>But <code>increment</code> and <code>getValue</code> still have a refernce of <code>value</code> variable when being executed.</p>
        <p>What happened here was, when the self executing anonymous function executed and returned those 2 functions as a part of the properties, a <em><strong>snapshot</strong></em> of <code>value</code> was created and sent along with those functions. You can assume that there is a variable <code>value</code> inside the scope of both <code>increment</code> and <code>getValue</code>. These 2 methods share a scope which contains the <em>hidden</em> <code>value</code> variable. This scope is actually the <em>context</em> in which it was created.</p>
        <p>This ability of JavaScript is called <em><strong>Closure</strong></em></p>
        <p>If you <code>increment</code> the <code>value</code> the hidden variable <code>value</code> increased. When i <code>getValue</code> then that same <code>value</code> is returned. This prooves that the hidden <code>value</code> variable is in a shared scope.</p>
        <p><img src="../../Content/Images/javascript/16.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Callbacks</div>
    </div>
    <div class="panel-body">
        <p>
            To freeze the page
            @Html.DisplayCode(@"
request = prepare_the_request( );
response = send_request_synchronously(request);
display(response);
", "js")
        </p>
        <p>
            To not freeze the page
            @Html.DisplayCode(@"
request = prepare_the_request( );
send_request_asynchronously(request, function (response) {
    display(response);
});
", "js")
        </p>
        <p>Note, the internal implementation of <code>send_request_asynchronously</code> decides how to call and get back a return value. This concept only displays what should be done to not freeze the page. Instead of getting back a response and waiting till we get back a response, pass the request and (what should be done when we get back a response)to the method and move on.</p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Module</div>
    </div>
    <div class="panel-body">
        <p>A module is a function or object that is like an interface to do things and have states, but the implementation is hidden.</p>
        <p>
            Take the example of a Module that makes serial number
            @Html.DisplayCode(@"
var serial_maker = function ( ) {
// Produce an object that produces unique strings. A
// unique string is made up of two parts: a prefix
// and a sequence number. The object comes with
// methods for setting the prefix and sequence
// number, and a gensym method that produces unique
// strings.
    var prefix = '';
    var seq = 0;
    return {
        set_prefix: function (p) {
            prefix = String(p);
        },
        set_seq: function (s) {
            seq = s;
        },
        gensym: function ( ) {
            var result = prefix + seq;
            seq += 1;
            return result;
        }
    };
};
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/17.png" alt="" /></p>
        <p>Notice these methods do not use <code>this</code> so it wont be possible to pass a differnt value of <code>this</code> via Apply Invocation.</p>
        <p>Of course the complete method can be updated by another method, but it still does not reveals the implementation. Not clear</p>
        <p>Notice if we pass the <code>serialMaker.gensym</code> method to another function, the user now won't be able to change the definition of <code>set_prefix</code> and set_seq. Instead he is only allowed to generate serial numbers.</p>
        <p>
            <img src="../../Content/Images/javascript/18.png" alt="" />
        </p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Cascade</div>
    </div>
    <div class="panel-body">
        <p>
            Some methods do not have a return value, it is typical for methods that set or change the state of an object to return nothing. If we have those methods return <code>this</code> instead of <code>undefined</code>, we can enable cascades. Common example is <code>jQuery</code>. Let's see this in code.
            @Html.DisplayCode(@"
var Employee = function (id, name, rank) {
    this.id = id;
    this.name = name;
    this.rank = rank;

    this.increaseId = function () {
        this.id++;
    };

    this.nameChange = function (newName) {
        this.name = newName;
    };

    this.increaseRank = function () {
        this.rank++;
    }
}
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/19.png" alt="" /></p>
        <p>
            Now, lets see cascading
@Html.DisplayCode(@"
var Employee = function (id, name, rank) {
    this.id = id;
    this.name = name;
    this.rank = rank;

    this.increaseId = function () {
        this.id++;
        return this;
    };

    this.nameChange = function (newName) {
        this.name = newName;
        return this;
    };

    this.increaseRank = function () {
        this.rank++;
        return this;
    }
}
", "js")
        </p>
        <p><img src="../../Content/Images/javascript/20.png" alt="" /></p>
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Curry</div>
    </div>
    <div class="panel-body">
        TODO
    </div>
</div>


<div class="panel panel-info">
    <div class="panel-heading">
        <div class="panel-title">Memoization</div>
    </div>
    <div class="panel-body">
        TODO
    </div>
</div>